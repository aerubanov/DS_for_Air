version: "2"
services:
  PostgreSQL:
    restart: always
    image: postgres
    container_name: postgres
    environment:
      - DEBUG=false

      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=pgdb
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - backend

  loader:
    restart: always
    build:
      context: ../../src
      dockerfile: ./web/loader/Dockerfile
    container_name: loader
    networks:
      - backend
    command: python -m src.web.loader.app -u
    depends_on:
            - PostgreSQL
    volumes:
      - "../../DATA/processed:/code/data"
      - "./logs:/code/logs"

  api:
    restart: always
    build:
      context: ../../src
      dockerfile: ./web/api/Dockerfile
    container_name: api
    networks:
      - backend
    ports:
      - "8080:8000"
    depends_on:
      - PostgreSQL
    volumes:
      - "./logs:/code/logs"
    command: gunicorn src.web.api.run:app -b 0.0.0.0:8000

  ml:
    restart: always
    build:
      context: ../../src
      dockerfile: ./web/ml/Dockerfile
    container_name: ml
    networks:
      - backend
    command: python -m src.web.ml.run -u
    depends_on:
      - PostgreSQL
    volumes:
        - "../../models:/code/models"
        - "./logs:/code/logs"

  script:
    build:
      context: ../../src
      dockerfile: ./web/scripts/Dockerfile
    container_name: scripts
    networks:
      - backend
    command: python -m src.web.scripts.fill_database -u
    depends_on:
      - PostgreSQL
    volumes:
      - "../../DATA/processed:/code/data"

networks:
  backend: